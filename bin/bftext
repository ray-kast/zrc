#!/usr/bin/env ruby

require 'getoptlong'

def help
  $stderr << <<~EOF
    Usage: bftext [options] [--] [text]
    Convert a string to Brainfuck.

    If no text is given, bftext will read from stdin.

    Options:
      --help, -h          Print this message and quit.
      --trim-right, -t    Trim the right end of every line, and the final
                          newline.
      --ogham, -o         Output Ogham runes.
      --verbose, -v       Output extra debug information.
  EOF
end

def factors(n) (1..Math::sqrt(n).to_i).lazy.select{|m| n % m == 0 } end

def inc_naive(n) '*' * n end

def inc_add(n)
  ret = nil

  (1...n).each do |a|
    b = n - a

    str = "#{inc(b)}#{inc(a)}"

    ret = str if !ret || str.size < ret.size
  end

  ret
end

def inc_mul_by(n, f, g)
  # TODO: make the right-hand inc non-naive?
  ">#{(f == n ? inc_naive(f) : inc(f)).gsub('*', '+')}[-<#{inc_naive(g)}>]<"
end

def inc_mul(n)
  ret = nil

  factors(n).each do |f|
    g = n / f

    str = inc_mul_by(n, f, g)
    inc_mul_by(n, g, f).tap{|s| str = s if s.size < str.size }

    ret = str if !ret || str.size < ret.size
  end

  ret
end

$inc_cache = {}

def inc(n)
  $inc_cache.fetch(n) do
    ret = inc_naive(n)

    inc_mul(n).tap{|s| ret = s if s && s.size <= ret.size }
    inc_add(n).tap{|s| ret = s if s && s.size <= ret.size }

    $inc_cache[n] = ret
  end
end

$ogham = {
  '-' => ' ',
  '+' => 'ᚐ',
  '<' => '᚜',
  '>' => '᚛',
  '[' => 'ᚁ',
  ']' => 'ᚆ',
  '.' => 'ᚖ',
  ',' => 'ᚕ',
}

$ogham_re = Regexp.union(*$ogham.each_key)

def write(s, ogham)
  s = s.to_s.gsub($ogham_re) {|m| $ogham[m] } if ogham

  $stdout << s
end

opts = GetoptLong.new(
  ["--help", "-h", GetoptLong::NO_ARGUMENT],
  ["--trim-right", "-t", GetoptLong::NO_ARGUMENT],
  ["--ogham", "-o", GetoptLong::NO_ARGUMENT],
  ["--verbose", "-v", GetoptLong::NO_ARGUMENT],
)

trim = verb = ogham = false

opts.each do |opt, _|
  case opt
    when "--help"
      help
      exit 0
    when "--trim-right"
      trim = true
    when "--ogham"
      ogham = true
    when "--verbose"
      verb = true
  end
end

str = ARGV.join(" ") unless ARGV.empty?
str = ARGF.read unless str

if trim
  str.gsub!(/\s+\n/, "\n")
  str.rstrip!
end

last = 0

str.force_encoding('utf-8').bytes.each do |chr|
  curr = chr.ord
  n = curr - last

  if n > 0
    write inc(n).gsub('*', '+'), ogham
  else
    write inc(-n).gsub('*', '-'), ogham
  end

  write ".", ogham

  last = curr
end

$stdout.flush

$stderr << "\n" if verb && $stdout.tty?

$inc_cache.each{|k, v| $stderr << "#{k} => #{v}\n" } if verb
