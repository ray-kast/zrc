#!/usr/bin/env perl6

sub srgb-gamma($c) { if $c ≤ 0.0031308 { 12.92 * $c } else { 1.055 * $c ** (1/2.4) - 0.055 } }

sub hcy2xyy($h, $c, $Y) {
  my $theta = $h * π / 180;
  return (0.31271 + cos($theta) * $c, 0.32902 + sin($theta) * $c, $Y);
}

sub xyy2xyz($x, $y, $Y) {
  my $Yy = $Y / $y;
  return ($Yy * $x, $Y, $Yy * (1 - $x - $y));
}

sub xyz2xyy($x, $y, $z) {
  my $xyz = $x + $y + $z;
  return ($x / $xyz, $y / $xyz, $y);
}

sub xyz2srgb($x, $y, $z) {
  my @xyz = ($x, $y, $z);

  given (
    (+3.2406, -1.5372, -0.4986),
    (-0.9689, +1.8758, +0.0415),
    (+0.0557, -0.2040, +1.0570)
  ).map: { srgb-gamma [@xyz «*» $_].reduce(&[+]); } {
    my @ret = $_;
    if @ret.map({ $_ < 0 || $_ > 1 }).any {
      my @xyy = xyz2xyy($x, $y, $z);

      warn "xyY(@xyy.join(', ')) -> XYZ($x, $y, $z) -> sRGB(@ret.join(', '))"
    }
    return @ret;
  }
}

sub rgb2term8($r, $g, $b) {
  return (5, 16 + reduce
    { $^a * 6 + $^b },
    ($r, $g, $b).map({ 0 max (5 min ($_ * 5).round); }));
}

sub rgb2term24($r, $g, $b) {
  return (flat 2, ($r, $g, $b).map({ 0 max (255 min ($_ * 255).round); }))
}

constant &srgb = &xyz2srgb ∘ &xyy2xyz ∘ &hcy2xyy;
constant &tclr = &rgb2term24 ∘ &xyz2srgb ∘ &xyy2xyz ∘ &hcy2xyy;

sub tgray($a where $a ≥ 0 & $a ≤ 1) { return (5, 232 + Int($a * 23)); }

loop {
  my $h = prompt( 'h> ') andthen .Rat orelse { say ''; exit(0); };
  my $c = prompt( 'c> ') andthen .Rat orelse { say ''; exit(0); };
  my $y = prompt( 'y> ') andthen .Rat orelse { say ''; exit(0); };
  $c /= 100;
  $y /= 100;
  my ($r, $g, $b) = srgb($h, $c, $y);
  my $clr = (flat 48, rgb2term24($r, $g, $b)).join(';');

  say sprintf( '#%02x%02x%02x', max(0, min(255, $r * 255)).round, max(0, min(255, $g * 255)).round, max(0, min(255, $b * 255)).round);

  say "\e[{$clr}m                \e[0m";
  say "\e[{$clr}m                \e[0m";
  say "\e[{$clr}m                \e[0m";
  say "\e[{$clr}m                \e[0m";
  say "\e[{$clr}m                \e[0m";
  say "\e[{$clr}m                \e[0m";
}
