#!/usr/bin/env ruby

require 'etc'
require 'fileutils'
require 'json'
require 'open3'
require 'yaml'

$code = 0

def flac_params(file, subset: false)
  rate = 96_000

  if subset
    out, status = Open3.capture2(
      *%w[ffprobe -show_streams -of json=c=1 -v 8],
      file,
    )
    out = JSON.parse(out)

    unless status.success? && out['streams']
      throw "Invalid input file #{file.inspect}"
    end

    rate = nil
    for stream in out['streams']
      next if stream['sample_rate'].nil?
      r = Integer(stream['sample_rate'])
      throw "Conflicting sample rates found for #{file.inspect}" unless rate.nil? || rate == r
      rate = r
    end
  end

  %W[
    -threads #{Etc.nprocessors}
    -frame_size #{rate <= 48_000 ? 4096 : 8192}
    -lpc_coeff_precision 15
    -lpc_type cholesky
    -lpc_passes 4
    -min_partition_order 0
    -max_partition_order 8
    -prediction_order_method search
    -ch_mode auto
    -exact_rice_parameters true
    -multi_dim_quant false
    -min_prediction_order 1
    -max_prediction_order #{rate <= 48_000 ? 12 : 32}
  ]
end

ARGV.each do |filename|
  basedir = filename == '-' ? Dir::getwd : File::dirname(filename)

  puts "Starting in #{basedir.inspect}"

  manifest = YAML::load(File.read(filename)).to_h

  outdir = File::join(basedir, manifest['out'])
  last_track = nil
  yes = false

  manifest['tags'] ||= {}

  for tags in manifest['files']
    file = tags.delete('in')
    raise 'Missing filename' if file.nil?

    puts "==> #{file}"

    # Load pattern-based tags
    ptags = manifest['tags']
      .filter{|(p, _)| File::fnmatch(p, file) }
      .reduce({}) {|t, (_, u)| t.merge(u) }

    tags = ptags.merge(tags)


    # Load special tags after processing patterns
    inc = tags.delete('include')
    cover = tags.delete('cover')
    seek_points = tags.delete('seek-points') || '100x'

    # Special handling for track #
    if tags.include?('track') && tags['track'].nil?
      raise 'Cannot auto-increment track number for the first file!' if last_track.nil?

      tags['track'] = last_track + 1
    end

    last_track = tags['track'].to_i

    # Convert tags to ffmpeg arguments
    tag_pairs = tags
      .each
      .map{|(k, v)| "#{k.upcase}=#{v.to_s}" }

    tag_pairs.each do |pair|
      s = pair
        .split("\n")
        .flat_map{|l| l.chars.each_slice(60).map{|s| s.join } }
        .join("\n       ")

      puts "  -> #{s}"
    end

    # Compute file names
    (fhead, _, ftail) = file.rpartition(File::extname(file))
    outfile = "#{fhead}.flac#{ftail}"

    filepath = File::join(basedir, file)
    incpath = File::join(basedir, inc) if inc
    coverpath = File::join(basedir, cover) if cover
    outpath = File::join(outdir, outfile)

    free_stream = 0
    stream = lambda do |url, &block|
      idx = free_stream
      free_stream += 1

      block.(idx)
      ['-i', url]
    end

    fileidx = nil
    incidx = nil
    coveridx = nil

    # Call ffmpeg
    flags = [
      'ffmpeg',
      *('-y' if yes),

      # Inputs
      *stream.(filepath) {|i| fileidx = i },
      *(stream.(incpath) {|i| incidx = i } if incpath),
      *(stream.(coverpath) {|i| coveridx = i } if coverpath),

      # Mappings
      *%W[-map:0 #{fileidx}:a -c:0 flac],
      *flac_params(filepath),
      *(%W[
        -map:1 #{coveridx || incidx}:v#{'?' if !coveridx}
        -c:1 copy
        -disposition:1 attached_pic
      ] if coveridx || incidx),
      *(%w[-map_metadata -1] if inc == false),
      *tag_pairs.flat_map{|p| ['-metadata', p] },
      outpath,
    ]

    puts "  -> Reading #{filepath.inspect}"
    puts "  -> Writing #{outpath.inspect}"
    puts "  -> #{flags.map{|f| f.inspect[0...60] }.join("\n       ")}"

    FileUtils::mkdir_p(File::dirname(outpath))
    pid = Process::spawn(*flags)
    pid, status = Process.wait2(pid)
    unless status.success?
      $stderr << "ffmpeg exited unsuccessfully: #{status}"
      $code = 1 if $code == 0
      break
    end

    # Call metaflac
    [
      %w[--remove --block-type SEEKTABLE],
      ['--add-seekpoint', seek_points],
    ].each do |op|
      pid = Process::spawn('metaflac', *op, outpath)
      pid, status = Process.wait2(pid)
      unless status.success?
        $stderr << "metaflac exited unsuccessfully: #{status}"
        $code = 1 if $code == 0
      end
    end

    # Wait until successfull invocation to disable warnings
    yes = true
  end

  for file in manifest['copy']
    src = File::join(basedir, file)
    dst = File::join(outdir, file)

    FileUtils::cp_r(src, dst, verbose: true)
  end
end

exit $code
